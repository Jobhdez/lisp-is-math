(add-vectors [3 4 5] [5 6 7])
(pow-vectors [3 4 5] 3)
(pow-matrices [[4 5 6][5 6 7]] 3)
(exp-vectors [4 5 6])
(log-vectors [4 5 56 6 7 7 8 8 9 9 90 0 9 3])
(log-vector [4 5 6 6 7])
(abs-vector [4 5 6 -3 -4 -5])
(max-vectors [4 5 6 6 7 8 9] 7)
(max-vectors [4 5 6 7] [5 6 7 8])
(min-vectors 4 [3 4 2])
(log10-vector [4 5 6 6 77])
(log10-matrix [[4 5 6 ] [5 6 7]])
(defn square [x] 
  (* x x))
(square 3)
(pow-v [3 4 5] 4)
(in-ns 'lisp-is-math.core)
(pow-v [4 5 6] 4)
(pow-v [4 5 6] 3)
(require 'lisp-is-math.core)
(pow-v [4 5 6] 3)
(lisp-is-math.core/pow-v [4 5 6] 3)
(add-v [4 5 6] [5 6 7])
(in-ns 'lisp-is-math.core)
(add-v [4 5 6] [5 6 7])
(require 'lisp-is-math.core)
(pow-v [3 4 5] 3)
(add-v [4 5 6] [4 5 6])
(mul-m [[4 5 6 6] [5 6 7 7]] [[4 5 6 7] [5 6 7 9]])
(exp-v [4 5 6])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(length [4 5])
(len [4 5])
(alength [4 5])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3][4 5 6]] [[7 8] [9 10] [11 12]])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(require 'lisp-is-math.core)
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(in-ns 'lisp-is-math.core)
(mat-mul [[1 2 3] [4 5 6]] [[7 8] [9 10] [11 12]])
(exit)
